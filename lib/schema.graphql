union IndexSearch = Catalog | Item

type Pagination {
  items: [Item]
  catalogsItems: [CatalogItems]
  itemsIds: [ItemId]
  pageInfo: [PageInfo]
}

type ItemId {
  _id: String!
}

type PageInfo {
  count: Int!
}

type Item {
  _id: ID!
  mysqlId: Int!
  name: String!
  planId: Int!
  image: String!
  description: String!
  price: Int!
}

type Catalog {
  _id: ID!
  mysqlId: Int!
  name: String!
  items: [Item]
  filteredItems: [Item]
}

type CatalogItems {
  _id: Catalog
  items: Int!
}

type Query {
  "Return all items"
  getItems: [Item]
  "Return a item"
  getItem(id: ID!): Item
  "Return all catalogs"
  getCatalogs: [Catalog]
  "Return a catalog"
  getCatalog(id: ID!): Catalog
  "Return catalogs with Items filtered by keyword, standard and premium item plans"
  getItemsPaginationAndFIltered(
    keyword: String!
    lang: String!
    order: String!
    pageNumber: Int!
    nPerPage: Int!
  ): Pagination
  "Return catalogs and Items both filtered by keyword, standard and premium item plans"
  getCatalogsStandardPremiumItemPlanFiltered(
    keyword: String!
    lang: String!
  ): [IndexSearch]
}

input ItemInput {
  mysqlId: Int!
  name: String!
  planId: Int!
}

input CatalogInput {
  mysqlId: Int!
  name: String!
}

input ItemEditInput {
  name: String
  planId: Int
}

type Mutation {
  "Create Items autocomplete"
  createItem(input: ItemInput!): Item
  "Create Catalogs"
  createCatalog(input: CatalogInput!): Catalog
  "Edit item by id"
  editItem(_id: ID!, input: ItemEditInput): Item
  "Delete item by id"
  deleteItem(_id: ID!): String
  "Relate Item to a catalog"
  relateItemsToCatalog(catalogID: ID!, itemID: ID!): Catalog
}
